/* Generated By:JavaCC: Do not edit this line. Sng2svg.java */
import java.util.*;
import java.io.*;

public class Sng2svg implements Sng2svgConstants {

  /** Main entry point. */
  public static void main(String args[]) throws ParseException, IOException {
        InputStream ins;
    OutputStream outs;
    File fileIn;
    File fileOut;

    if (args.length < 1)
        ins = System.in;
    else {
        fileIn = new File(args[0]);
        ins = new FileInputStream(fileIn);
    }

    if (args.length < 2)
        outs = System.out;
    else {
        fileOut = new File(args[1]);
        outs = new FileOutputStream(fileOut);
    }

    Sng2svg parser = new Sng2svg(ins);
    Writer out
       = new BufferedWriter(new OutputStreamWriter(outs));
    SVGRenderer render = new SVGRenderer(out);
    render.printHeader();
    parser.Input(render);
    render.printFooter();
  }

/** Root production. */
  static final public void Input(SVGRenderer render) throws ParseException, IOException {
    Song(render);
    jj_consume_token(0);
    ;
  }

  static final public void Bar(SVGRenderer render) throws ParseException, IOException {
    java.util.Vector chordtext = new java.util.Vector<BarInfo>();
    Token tPreText;
    String sPreText;
    Token tChord;
    String sChord;
    Token tText;
    String sText;
    Boolean bRepStart, bRepEnd, bDoubleBarStart, bDoubleBarEnd;
         sPreText = "";bRepStart=false; bRepEnd=false;bDoubleBarStart=false;bDoubleBarEnd=false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TEXT:
      tPreText = jj_consume_token(TEXT);
                          sPreText = tPreText.image;
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPENDOUBLEBAR:
      jj_consume_token(OPENDOUBLEBAR);
                          bDoubleBarStart=true;
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPENREPEAT:
      jj_consume_token(OPENREPEAT);
                       bRepStart=true;
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CHORD:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_1;
      }
      tChord = jj_consume_token(CHORD);
                          sText = "";
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TEXT:
        tText = jj_consume_token(TEXT);
                               sText = tText.image;
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
                 sChord = tChord.image; chordtext.addElement(new BarInfo(sChord.substring(1,sChord.length()-1), sText));
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CLOSEREPEAT:
      jj_consume_token(CLOSEREPEAT);
                        bRepEnd=true;
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CLOSEDOUBLEBAR:
      jj_consume_token(CLOSEDOUBLEBAR);
                           bDoubleBarEnd=true;
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    jj_consume_token(BARLINE);
         render.printBar(sPreText, chordtext, bRepStart, bRepEnd, bDoubleBarStart, bDoubleBarEnd);
  }

  static final public void Bars(SVGRenderer render) throws ParseException, IOException {
    Token tPreText;
    String sPreText;
         sPreText = "";
    jj_consume_token(BARSBLK);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BARSDESC:
      jj_consume_token(BARSDESC);
      tPreText = jj_consume_token(TEXT);
                                 sPreText = tPreText.image;
      jj_consume_token(ENDBARSDESC);
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    jj_consume_token(BARLINE);
     render.enterBarsBlock(sPreText);
    label_2:
    while (true) {
      Bar(render);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BARLINE:
      case OPENREPEAT:
      case CLOSEREPEAT:
      case OPENDOUBLEBAR:
      case CLOSEDOUBLEBAR:
      case CHORD:
      case TEXT:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_2;
      }
    }
    jj_consume_token(ENDBARSBLK);
          ;
  }

  static final public void Title(SVGRenderer render) throws ParseException, IOException {
  Token t;
    jj_consume_token(TITLEBLK);
    t = jj_consume_token(TEXT);
    jj_consume_token(ENDTITLE);
            render.printTitle( t.image);
  }

  static final public void TextBlock(SVGRenderer render) throws ParseException, IOException {
  Token t;
    jj_consume_token(TEXTBLK);
    t = jj_consume_token(TEXT);
    jj_consume_token(ENDTEXT);
            render.printTextBlock( t.image);
  }

  static final public void Song(SVGRenderer render) throws ParseException, IOException {
    Title(render);
    label_3:
    while (true) {
      Bars(render);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BARSBLK:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_3;
      }
    }
     ;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public Sng2svgTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[10];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80000,0x10000,0x4000,0x40000,0x80000,0x8000,0x20000,0x800,0xfe000,0x200,};
   }

  /** Constructor with InputStream. */
  public Sng2svg(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Sng2svg(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new Sng2svgTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Sng2svg(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new Sng2svgTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Sng2svg(Sng2svgTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(Sng2svgTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[20];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 10; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 20; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
